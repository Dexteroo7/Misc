import javaslang.control.Try;
import net.spy.memcached.internal.GetCompletionListener;
import net.spy.memcached.internal.ListenableFuture;
import net.spy.memcached.internal.OperationCompletionListener;
import org.reactivestreams.Subscriber;
import reactor.core.Fuseable;
import reactor.core.publisher.Mono;
import reactor.core.publisher.Operators;

import java.util.Objects;
import java.util.function.Supplier;

public interface ReactorBridge {

	static <T> Mono<T> monoFromGetFuture(Supplier<Try<? extends ListenableFuture<? extends T, GetCompletionListener>>> futureSupplier) {
		return new MonoGetFuture<>(futureSupplier);
	}

	static <T> Mono<T> monoFromOperationFuture(Supplier<Try<? extends ListenableFuture<? extends T, OperationCompletionListener>>> futureSupplier) {
		return new MonoOperationFuture<>(futureSupplier);
	}

	final class MonoGetFuture<T> extends Mono<T> implements Fuseable {

		final Supplier<Try<? extends ListenableFuture<? extends T, GetCompletionListener>>> futureSupplier;

		MonoGetFuture(Supplier<Try<? extends ListenableFuture<? extends T, GetCompletionListener>>> futureSupplier) {
			this.futureSupplier = futureSupplier;
		}

		@Override
		public void subscribe(Subscriber<? super T> s) {

			Operators.MonoSubscriber<T, T> sds = new Operators.MonoSubscriber<>(s);

			s.onSubscribe(sds);

			if (sds.isCancelled()) {
				return;
			}

			//on subscribe get the future and add a listener
			Objects.requireNonNull(futureSupplier.get(), "future")
				   .onFailure(s::onError)
				   .map(getFuture -> getFuture.addListener(future -> Try.of(future::get)
																		.onFailure(s::onError)
																		.filter(Objects::nonNull)
																		.onSuccess(v -> sds.complete((T) v))
																		.onFailure(e -> s.onComplete())));
			//			future.whenComplete((v, e) -> {
			//				if (e != null) {
			//					s.onError(e);
			//				} else if (v != null) {
			//					sds.complete(v);
			//				} else {
			//					s.onComplete();
			//				}
			//			});
		}
	}

	final class MonoOperationFuture<T> extends Mono<T> implements Fuseable {

		final Supplier<Try<? extends ListenableFuture<? extends T, OperationCompletionListener>>> futureSupplier;

		MonoOperationFuture(Supplier<Try<? extends ListenableFuture<? extends T, OperationCompletionListener>>> futureSupplier) {
			this.futureSupplier = futureSupplier;
		}

		@Override
		public void subscribe(Subscriber<? super T> s) {

			Operators.MonoSubscriber<T, T> sds = new Operators.MonoSubscriber<>(s);

			s.onSubscribe(sds);

			if (sds.isCancelled()) {
				return;
			}

			//on subscribe get the future and add a listener
			Objects.requireNonNull(futureSupplier.get(), "future")
				   .onFailure(s::onError)
				   .map(getFuture -> getFuture.addListener(future -> Try.of(future::get)
																		.onFailure(s::onError)
																		.filter(Objects::nonNull)
																		.onSuccess(v -> sds.complete((T) v))
																		.onFailure(e -> s.onComplete())));
		}
	}
}
